ORG                       0x427;
ADDR_FIRST:              WORD   0x609;    Адрес начала строки
ADDR_CURRENT:            WORD       0;          Адрес текущего элемента
READ_BYTE:               WORD    0x2;  Указывает, какой символ передавать из ячейки
                                                                      ;      (старший или младший байт)
STOP_SYMBOL:      WORD 0x0D;               Символ окончания строки
MASK:                         WORD 0x00FF;
  
START:                       LD   ADDR_FIRST;
                                     ST   ADDR_CURRENT;   Инициализируем указатель на текущий элемет
     
SPIN:                          IN 3;                                    Проверяем, нажата ли кнопка "готов"
                                    AND #0x40;
                                    BEQ SPIN;                         Если нет, проверяем ещё раз;
     
                                    LD READ_BYTE;
                                    CMP #0x2;       работаем со старшим или с младшим байтом
                                    BEQ CASE_2; 

CASE_1:            LD #0x2;         меняем режим, чтобы на следующем проходе вывести старший байт
                             ST READ_BYTE;        2 ->  READ_BYTE
                             LD (ADDR_CURRENT)+;  оба символа из ячейки прочитаны, так что
                             JUMP OUTPUT;                перемещаем указатель на след. ячейку памяти
     
CASE_2:              LD #0x1;         меняем режим, чтобы в последующем вывести младший байт
                              ST READ_BYTE;           1 -> READ_BYTE
                              LD (ADDR_CURRENT); загружаем оба символа из ячейки памяти,
                              SWAB;              помещаем необходимый символ в младший байт      
     
OUTPUT:           OUT 2;                                 выводим символ 
                             AND MASK;
                             CMP STOP_SYMBOL;    проверем, является ли он стоп-символом,
                             BEQ END_;                   если да, завершаем программу, если нет,
                             JUMP SPIN;           ждем нажатия кнопки "готов" для вывода следующего символа
     
END_:                   HLT;    
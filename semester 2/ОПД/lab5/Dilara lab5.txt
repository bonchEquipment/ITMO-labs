ORG                       0x50B;
ADDR_FIRST:              WORD   0x571;         Адрес начала строки
ADDR_CURRENT:            WORD       0;          Адрес текущего элемента
READ_BYTE:               WORD    0x1;  Указывает, какой символ записывать в ячейки
                                                                      ;      (старший или младший байт)
STOP_SYMBOL:      WORD 0x0D;               Символ окончания строки
MASK:                         WORD 0x00FF;
  
START:                       LD   ADDR_FIRST;
                                      ST   ADDR_CURRENT;   Инициализируем указатель на текущий элемет
     
SPIN:                          IN 5;                                    Проверяем, нажата ли кнопка "готов"
                                    AND #0x40;
                                    BEQ SPIN;                         Если нет, проверяем ещё раз;
     
                                    LD READ_BYTE;
                                    CMP #0x2;       работаем со старшим или с младшим байтом
                                    BEQ CASE_2; 

CASE_1:            LD #0x2;         меняем режим, чтобы на следующем проходе записать в старший байт
                             ST READ_BYTE;        2 ->  READ_BYTE
	IN 4;
	ST (ADDR_CURRENT);   сохраняем введенный символ в младший байт
	CMP STOP_SYMBOL;    проверем, является ли он стоп-символом,
                             BEQ END_;                   если да, завершаем программу, если нет,
                             JUMP SPIN;           ждем нажатия кнопки "готов" для следующего символа
     
CASE_2:              LD #0x1;         меняем режим, чтобы в последующем записать в младший байт
                              ST READ_BYTE;           1 -> READ_BYTE
                              LD (ADDR_CURRENT); загружаем ячейку памяти
                              SWAB;                 
                              IN 4;	 помещаем введенный символ в старший байт  
                             SWAB;   
                             ST (ADDR_CURRENT)+;       сохраняем значение в память
	SWAB;
	AND MASK;                      
	CMP STOP_SYMBOL;    проверем, является ли введенный символ стоп-символом,
	BEQ END_;                   если да, завершаем программу, если нет
                             
                             JUMP SPIN;           ждем нажатия кнопки "готов" для вывода следующего символа

     
END_:                   HLT;    
